---
import Image from "astro/components/Image.astro";
import Layout from "./Layout.astro";
import { splitThatText } from "../utils";

interface Props {
    title: string;
    description: string;
    pubDate: string;
    role: string;
    tags: Array<string>;
    image: {
        src: string;
        alt: string;
    };
}

const { title, description, pubDate, role, tags, image } = Astro.props;

const tsplit = splitThatText(title);
function pubdate() {
    const v = pubDate.split("-")
    const d = new Date(+v[2],+v[1]-1,+v[0])
    return d
}

---

<Layout
    bg="black"
    nav_pos="right"
    title={title}
    description={description}
    category={tags[0]}
    keywords={tags.join(",")}
>
    <main class="bg-night text-white_smoke">
        <section class="h-[100vh] flex flex-col md:flex-row px-16 sm:px-0">
            <div
                class="md:w-1/2 flex flex-col sm:px-16 justify-center gap-3 pt-32 pb-10 sm:pb-0 sm:pt-0"
            >
                <span class="uppercase text-coquelicot font-semibold"
                    >{tags.join("    |   ")}</span
                >
                <span class="text-xl md:text-3xl font-bold"
                    >{pubdate().getDate()}.{pubdate().getMonth()}.{pubdate().getFullYear()}</span
                >
                <h1
                    class="font-extenda_headings text-4xl md:text-6xl lg:line-clamp-4 uppercase"
                >
                    {
                        tsplit.flatMap((e) => {
                            if (e.is_text) {
                                return <span>{e.value}</span>;
                            } else {
                                return (
                                    <span class="font-satoshi font-black">{e.value}</span>
                                );
                            }
                        })
                    }
                </h1>
                <span class="opacity-90">{role}</span>
                <p class="opacity-70">
                    {description}
                </p>
            </div>
            <div
                class="md:w-1/2 h-full saturate-0 hover:saturate-100 transition-all duration-1000"
            >
                <img
                    class="w-full h-full object-cover"
                    src={image.src}
                    alt={image.alt}
                    decoding="async"
                    loading="lazy"
                />
            </div>
        </section>
        <section class="px-16 pt-14 sm:pt-5 pb-7">
            <article class="sm:w-1/2 article">
                <slot />
            </article>
        </section>
    </main>
</Layout>
<script>
    import gsap from "gsap";
    import { CustomEase, ScrollTrigger } from "gsap/all";
    import SplitType from "split-type";
    import type { TargetElement } from "split-type";
    import { Ease as customEase } from "../animations/ease";
    gsap.registerPlugin(ScrollTrigger, CustomEase);
    document.querySelectorAll(".article").forEach((e) => {
        e.querySelectorAll("h1, h2, h3, h4").forEach((heading) => {
            anim(heading);
        });

        function split(element: TargetElement) {
            const chars = new SplitType(element, { types: "words,chars" });
            return chars;
        }

        function anim(target: any) {
            let chars = split(target);
            let tl = gsap.timeline({
                scrollTrigger: {
                    trigger: target,
                    start: "bottom bottom",
                    end: "bottom center",
                    scrub: 1,
                },
            });
            tl.from(chars.words, {
                yPercent: 120,
                stagger: 0.2,
                duration: 0.2,
                ease: customEase,
            });
            // tl.from(chars.words, { opacity: 0, yPercent: 100, duration: 0.5, ease: "back.out(2)", stagger: { amount: 0.5 } });
        }
    });
</script>
<style>
    article {
        h1 {
            font-size: 3rem;
            font-weight: 600;
            line-height: 1.5;
            margin-top: 2rem;
            padding-bottom: 0.1rem;
            overflow: clip;
        }
        h2 {
            font-size: 2.75rem;
            line-height: 1.5;
            margin-top: 2rem;
            padding-bottom: 0.1rem;
            overflow: clip;
        }
        h3 {
            font-size: 2.5rem;
            line-height: 1.25;
            margin-top: 2rem;
            padding-bottom: 0.1rem;
            overflow: clip;
        }

        p {
            padding-bottom: 1rem;
        }
    }
</style>
