---
interface Props {
  title: string;
  description: string;
  keywords: string;
  category: string;
  twitter?: {
    card?: "summary_large_image" | "summary" | "app" | "player" | null;
    title?: string | null;
    description?: string | null;
    site?: string | null;
    siteId?: string | null;
    creator?: string | null;
    creatorId?: string | null;
  } | null;
  openGraph?: {
    title?: string | null;
    description?: string | null;
    siteName?: string | null;
    url?: string | null;
    locale?: string | null;
    images?:
      | {
          url?: string;
          alt?: string;
          width?: number;
          height?: number;
        }[]
      | null;
  } | null;
  verification?: {
    google?: string | null;
    yandex?: string | null;
    yahoo?: string | null;
  } | null;
  nav_pos: "left" | "right";
  bg: "white" | "black";
}
import Nav from "../components/Nav.astro";
import Footer from "../components/Footer.astro";
const {
  title,
  description,
  keywords,
  twitter,
  openGraph,
  category,
  verification,
  nav_pos,
  bg,
} = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/png" href="/favicon.png" />
    <meta name="generator" content={Astro.generator} />
    {title ? <title>{title}</title> : null}
    {description ? <meta name="description" content={description} /> : null}
    {keywords ? <meta name="keywords" content={keywords} /> : null}
    {category ? <meta name="category" content={category} /> : null}
    {twitter?.card ? <meta name="twitter:card" content={twitter.card} /> : null}
    {
      twitter?.siteId ? (
        <meta name="twitter:site:id" content={twitter.siteId} />
      ) : null
    }
    {twitter?.site ? <meta name="twitter:site" content={twitter.site} /> : null}
    {
      twitter?.creator ? (
        <meta name="twitter:creator" content={twitter.creator} />
      ) : null
    }
    {
      twitter?.creatorId ? (
        <meta name="twitter:creator:id" content={twitter.creatorId} />
      ) : null
    }
    {
      twitter?.title ? (
        <meta name="twitter:title" content={twitter.title} />
      ) : null
    }
    {
      twitter?.description ? (
        <meta name="twitter:description" content={twitter.description} />
      ) : null
    }
    {
      twitter?.description ? (
        <meta name="twitter:description" content={twitter.description} />
      ) : null
    }

    {
      verification?.google ? (
        <meta name="google-site-verification" content={verification.google} />
      ) : null
    }
    {
      verification?.yahoo ? (
        <meta name="y_key" content={verification.yahoo} />
      ) : null
    }
    {
      verification?.yandex ? (
        <meta name="yandex-verification" content={verification.yandex} />
      ) : null
    }
    {
      openGraph?.title ? (
        <meta property="og:title" content={openGraph.title} />
      ) : null
    }
    {
      openGraph?.description ? (
        <meta property="og:description" content={openGraph.description} />
      ) : null
    }
    {openGraph?.url ? <meta property="og:url" content={openGraph.url} /> : null}
    {
      openGraph?.siteName ? (
        <meta property="og:site_name" content={openGraph.siteName} />
      ) : null
    }
    {
      openGraph?.locale ? (
        <meta property="og:locale" content={openGraph.locale} />
      ) : null
    }
    {
      openGraph?.images?.map((image) => (
        <>
          {image.url && <meta property="og:image" content={image.url} />}
          {image.alt && <meta property="og:image:alt" content={image.alt} />}
          {image.width && (
            <meta property="og:image:width" content={image.width.toString()} />
          )}
          {image.height && (
            <meta
              property="og:image:height"
              content={image.height.toString()}
            />
          )}
        </>
      ))
    }
  </head>
  <body>
    <Nav bg={bg} nav_pos={nav_pos} />
    <slot class="antialiased font-cabin text-night" />
    <Footer />
  </body>
</html>
<style is:global>
  body {
    background: #eff1ed;
  }
  html {
    font-family: "Satoshi-Variable", system-ui, sans-serif;
    background: #eff1ed;
    background-size: 224px;
  }
  code {
    font-family:
      Menlo,
      Monaco,
      Lucida Console,
      Liberation Mono,
      DejaVu Sans Mono,
      Bitstream Vera Sans Mono,
      Courier New,
      monospace;
  }
  /**
* @license
*
* Font Family: Satoshi
* Designed by: Deni Anggara
* URL: https://www.fontshare.com/fonts/satoshi
* Â© 2024 Indian Type Foundry
*
* Satoshi Variable (Variable font)
* Satoshi VariableItalic (Variable font)
*
*/
  @font-face {
    font-family: "Satoshi-VariableItalic";
    src: url("/fonts/Satoshi-VariableItalic.ttf") format("truetype");
    font-weight: 300 900;
    font-display: swap;
    font-style: italic;
  }
  @font-face {
    font-family: "Satoshi-Variable";
    src: url("/fonts/Satoshi-Variable.ttf") format("truetype");
    font-weight: 300 900;
    font-display: swap;
    font-style: normal;
  }

  @font-face {
    font-family: "Extenda-Variable";
    src: url("/fonts/Extenda-Variable.ttf") format("truetype");
    font-weight: 300 900;
    font-display: swap;
    font-style: normal;
    unicode-range: U+0020-0039, U+0041-005A, U+0061-007A;
  }
  @font-face {
    font-family: "RobotoMono-Variable";
    src: url("/fonts/RobotoMono-Variable.ttf") format("truetype");
    font-weight: 300 900;
    font-display: swap;
    font-style: normal;
    
  }
  @font-face {
    font-family: "RobotoMono-VariableItalic";
    src: url("/fonts/RobotoMono-Italic-Variable.ttf") format("truetype");
    font-weight: 300 900;
    font-display: swap;
    font-style: italic;
  }
  @font-face {
    font-family: "ExtendaHeadings";
    src: url("/fonts/ExtendaHeadings.ttf") format("truetype");
    unicode-range: U+0020-0039, U+0041-005A, U+0061-007A;
    font-weight: 600;
    font-display: swap;
    font-style: normal;
  }
  @font-face {
    font-family: "ExtendaXS";
    src: url("/fonts/ExtendaXS.ttf") format("truetype");
    font-weight: 100;
    font-display: swap;
    font-style: normal;
    unicode-range: U+0020-0039, U+0041-005A, U+0061-007A;
  }
  html.lenis,
  html.lenis body {
    height: auto;
  }

  .lenis.lenis-smooth {
    scroll-behavior: auto !important;
  }

  .lenis.lenis-smooth [data-lenis-prevent] {
    overscroll-behavior: contain;
  }

  .lenis.lenis-stopped {
    overflow: hidden;
  }

  .lenis.lenis-smooth iframe {
    pointer-events: none;
  }
</style>
<script>
  import Lenis from "lenis";

  const lenis = new Lenis();

  function raf(time: number) {
    lenis.raf(time);
    requestAnimationFrame(raf);
  }

  requestAnimationFrame(raf);
</script>
